/*
Map<index, epos> Index;
Map<pos, content> Data;

pos = decrypt(epos).with(secret);
content = serialize(ekey|eval);

*/


syntax = "proto3";
option go_package = "/proto";
package securekv;

message PutRequest {
  bytes index = 1; // generated from key with hmac
  bytes secret = 2; // generated from key with hmac
  bytes content = 3; // serialized from encrypted key and value
  bytes pos = 4; // maybe generated by order-preserving hashing algorithm with the whole dataset
}

message PutResponse {
  int32 code = 1;
}

message GetRequest {
  bytes index = 1;
  bytes secret = 2;
}

message GetResponse {
  int32 code = 1;
  bytes content = 2;
}

message NextRequest {
  bytes index = 1;
  bytes secret = 2;
}

message NextResponse {
  int32 code = 1;
  bytes content = 2;
}

service CryptKV {
  rpc Put(PutRequest) returns (PutResponse) {}
  rpc Get(GetRequest) returns (GetResponse) {}
  rpc Next(NextRequest) returns (NextResponse) {}
}

// TODO: Del